%% Fiber Properties
fiber_properties = fiber_properties_0522();

fiber_properties = [ ...
    fiber_properties.test_6_n4
];



%% Global options
global_opts = { ...
    'debug', true, ...
    'mna_ver', 'dev2', ...
    'Numstacks', 300, ...
    ...'oe_identifier', 'none', ...
    'oe_identifier', 'Meddis', ...
    ...'me_identifier', 'none', ...
    'me_identifier', 'PBLL', ...
};


%% Common options
[args, opt, memopt, paropt] = common_opts(struct(), ...
    do_not_change_settings=true, ...
    silent=true);



%% AntOpt Configuration
antopt = antOpt( ...
    'NumDiv', 1, ...
    'save_method', 'matlab_matfile', ...
    'script', 'ANT', ...
    'ant', 'v4', ...
    'fiber', {{'regular_HSR_v1'}}, ...
    'plotSynapseSimulation', 'all', ... % or specify false or 'all'
    'samplingFrequency', Frequency(100, 'kHz'), ... % example value
    'numberOfRepetitions', 10, ... % or set as needed
    'slices', {{'max_std_new'}} ... % or set as needed
);


%% Stimulus configuration

FREQUENCY = 4000;
AMPLITUDE = 80;
tone_duration = Time(20, 'ms');

stim_generator = @(Conf) devopts.stimulus( ...
    args.GlobalSamplingFrequency, tone_duration, ...
    'frequency', Conf.frequency, ...
    'amplitude', Conf.amplitude, ...
    'amplitude_unit', 'spl', ...
    'zeroDuration', Time(50, 'ms'), ...
    'fadeDuration', Time(20, 'ms'), ... 
    'onset', Time(1, 'ms'), ...
    'offset', Time(1, 'ms'));

num_replicas = 10;



%% Signal configuration
signal_poduct_args = { ...
    'frequency', FREQUENCY, ...
    'amplitude', AMPLITUDE};

[Signal_Configurations, Signal_Conf_nums, Signal_Conf_info] = ParameterProduct( ...
    signal_poduct_args{:});



%% Run calculation
CALCULATE = true;
if CALCULATE
    for j = 1:numel(Signal_Configurations)
        Conf = Signal_Configurations(j);
        [topt, stimulus] = stim_generator(Conf);
        
        % Define time vector and IHCVoltage for the simulation
        step = tone_duration.s * args.GlobalSamplingFrequency;
        t = linspace(0, tone_duration.s, step.Hz);
        IHCVoltage = stimulus.envelope_fcn(t) .* sin(2 * pi * FREQUENCY * t);

        % Run Transduction_v4
        [y_out, t_out, V_out, y_dyn_out, n, tropt, f_ChannelsOpenSS, f_CalciumCurrent, f_TransmitterRelease] = ...
            Transduction_v4(t, IHCVoltage, 'SR', replica, topt, antopt, runopt, memopt);

        done_frac = j / numel(Signal_Configurations);
    end
end
